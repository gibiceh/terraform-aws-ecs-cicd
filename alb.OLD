# DRY module implementations::::::::::::::::::::::::::::::::::::::::::::::::::::

# Resources ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
resource "aws_lb" "this" {
  count = var.create_alb ? 1 : 0
  name  = var.name

  subnets = var.alb_subnets

  internal                         = var.alb_internal
  load_balancer_type               = "application"
  enable_cross_zone_load_balancing = var.cross_zone_load_balancing_enabled
  enable_http2                     = var.http2_enabled

  security_groups = compact(
    concat(var.security_group_ids, [join("", aws_security_group.this.*.id)]),
  )

  enable_deletion_protection = var.deletion_protection_enabled

  access_logs {
    bucket  = var.access_logs_s3_bucket_id
    prefix  = var.component
    enabled = var.access_logs_enabled
  }

  tags = local.tags
}

resource "aws_security_group" "this" {
  count       = var.create_alb && var.security_group_enabled ? 1 : 0
  description = "Controls access to the ALB (HTTP/HTTPS)"
  vpc_id      = var.vpc_id
  name        = var.name
  tags        = local.tags
}

resource "aws_security_group_rule" "egress" {
  count             = var.create_alb && var.security_group_enabled ? 1 : 0
  type              = "egress"
  from_port         = "0"
  to_port           = "0"
  protocol          = "-1"
  cidr_blocks       = ["0.0.0.0/0"]
  security_group_id = join("", aws_security_group.this.*.id)
}

resource "aws_security_group_rule" "http_ingress" {
  count             = var.create_alb && var.security_group_enabled && var.http_enabled ? 1 : 0
  type              = "ingress"
  from_port         = var.http_port
  to_port           = var.http_port
  protocol          = "tcp"
  cidr_blocks       = var.http_ingress_cidr_blocks
  prefix_list_ids   = var.http_ingress_prefix_list_ids
  security_group_id = join("", aws_security_group.this.*.id)
}

resource "aws_security_group_rule" "https_ingress" {
  count             = var.create_alb && var.security_group_enabled && var.https_enabled ? 1 : 0
  type              = "ingress"
  from_port         = var.https_port
  to_port           = var.https_port
  protocol          = "tcp"
  cidr_blocks       = var.https_ingress_cidr_blocks
  prefix_list_ids   = var.https_ingress_prefix_list_ids
  security_group_id = join("", aws_security_group.this.*.id)
}

# Outputs ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
## Please include in ./outputs.tf
